import { COMMA, ENTER } from '@angular/cdk/keycodes';
import { Component, Input, ViewChild } from '@angular/core';
import { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatChipsModule } from '@angular/material/chips';
import { merge } from 'rxjs';
import { debounceTime, filter, mergeMap, startWith } from 'rxjs/operators';
import { InputBasicComponent } from '../input/input.component';
import { FunctionCaller1 } from '../../pipes/utility.pipe';
import { MatOptionModule } from '@angular/material/core';
import { MatIconModule } from '@angular/material/icon';
import { NgFor, NgIf, AsyncPipe } from '@angular/common';
import { MatFormFieldModule } from '@angular/material/form-field';
import * as i0 from "@angular/core";
import * as i1 from "../input/input.service";
import * as i2 from "../autocomplete/autocomplete.service";
import * as i3 from "@angular/material/form-field";
import * as i4 from "@angular/material/chips";
import * as i5 from "@angular/material/icon";
import * as i6 from "@angular/forms";
import * as i7 from "@angular/material/autocomplete";
import * as i8 from "@angular/material/core";
export class ChipListAutocompleteComponent extends InputBasicComponent {
    constructor(iS, autoS) {
        super(iS);
        this.iS = iS;
        this.autoS = autoS;
        this.separatorKeysCodes = [ENTER, COMMA];
        this.autoCompleteCtrl = new FormControl('');
    }
    ngOnInit() {
        super.ngOnInit();
        merge(this.autoCompleteCtrl.valueChanges.pipe(startWith('')), this.options$)
            .pipe(
        // filter((r) => !this.filterFunc),
        mergeMap((r) => this.autoS.filterOptions(this.autoCompleteCtrl.value, this.options)))
            .subscribe((r) => {
            this.filteredOptions = r;
        });
        this.autoCompleteCtrl.valueChanges
            .pipe(startWith(''))
            .pipe(debounceTime(1000), filter((r) => !!this.filterFunc), mergeMap((r) => this.filterFunc(this.autoCompleteCtrl.value)))
            .subscribe((r) => {
            this._options = r;
        });
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
    }
    add(event) {
        // const value = (event.value || '').trim();
        // // Add our fruit
        // if (value) {
        //   this.control?.value.push(value);
        // }
        // // Clear the input value
        // event.chipInput!.clear();
        // this.autoCompleteCtrl.setValue(null);
    }
    remove(index) {
        this.control?.value.splice(index, 1);
    }
    selected(event) {
        delete this.message;
        if (!this.control?.value)
            this.control?.patchValue([]);
        if (this.control?.value?.includes(event.option.value)) {
            this.message = event.option.viewValue + ' has already been added';
        }
        else
            this.control?.value.push(event.option.value);
        // this.fruitInput.nativeElement.value = '';
        this.autoCompleteCtrl.setValue(null);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: ChipListAutocompleteComponent, deps: [{ token: i1.InputService }, { token: i2.AutocompleteService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.2", type: ChipListAutocompleteComponent, isStandalone: true, selector: "chip-list-autocomplete", inputs: { filterFunc: "filterFunc", addedDataFormatter: "addedDataFormatter" }, viewQueries: [{ propertyName: "fruitInput", first: true, predicate: ["fruitInput"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<mat-form-field class=\"example-chip-list\" appearance=\"fill\">\n    <mat-label>{{label}}</mat-label>\n    <mat-chip-grid #chipGrid attr.aria-label=\"{{label}} selection\">\n        <mat-chip-row *ngFor=\"let item of control.value;let i =index\" (removed)=\"remove(i)\">\n            {{(addedDataFormatter|functionCaller1:item|async)||item}}\n            <button matChipRemove [attr.aria-label]=\"'remove ' + item\">\n                <mat-icon>cancel</mat-icon>\n            </button>\n        </mat-chip-row>\n    </mat-chip-grid>\n    <input placeholder=\"{{placeholder||label}}\" #aInput [formControl]=\"autoCompleteCtrl\" [matChipInputFor]=\"chipGrid\"\n        [matAutocomplete]=\"auto\" [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n        (matChipInputTokenEnd)=\"add($event)\" />\n    <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"selected($event)\">\n        <mat-option *ngFor=\"let option of filteredOptions\" [value]=\"option.value\">\n            {{option.label}}\n        </mat-option>\n    </mat-autocomplete>\n</mat-form-field>\n<div class=\"text-danger\" *ngIf=\"message\">{{message}}</div>", styles: [".example-chip-list{width:100%;height:auto}.mat-mdc-form-field:focus-within input{background:transparent!important}.mat-mdc-form-field{background:transparent!important}\n"], dependencies: [{ kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i3.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i3.MatLabel, selector: "mat-label" }, { kind: "ngmodule", type: MatChipsModule }, { kind: "component", type: i4.MatChipGrid, selector: "mat-chip-grid", inputs: ["tabIndex", "disabled", "placeholder", "required", "value", "errorStateMatcher"], outputs: ["change", "valueChange"] }, { kind: "directive", type: i4.MatChipInput, selector: "input[matChipInputFor]", inputs: ["matChipInputFor", "matChipInputAddOnBlur", "matChipInputSeparatorKeyCodes", "placeholder", "id", "disabled"], outputs: ["matChipInputTokenEnd"], exportAs: ["matChipInput", "matChipInputFor"] }, { kind: "directive", type: i4.MatChipRemove, selector: "[matChipRemove]" }, { kind: "component", type: i4.MatChipRow, selector: "mat-chip-row, [mat-chip-row], mat-basic-chip-row, [mat-basic-chip-row]", inputs: ["color", "disabled", "disableRipple", "tabIndex", "editable"], outputs: ["edited"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i5.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "ngmodule", type: MatAutocompleteModule }, { kind: "component", type: i7.MatAutocomplete, selector: "mat-autocomplete", inputs: ["disableRipple", "hideSingleSelectionIndicator"], exportAs: ["matAutocomplete"] }, { kind: "component", type: i8.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { kind: "directive", type: i7.MatAutocompleteTrigger, selector: "input[matAutocomplete], textarea[matAutocomplete]", exportAs: ["matAutocompleteTrigger"] }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i6.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "ngmodule", type: MatOptionModule }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "pipe", type: FunctionCaller1, name: "functionCaller1" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: ChipListAutocompleteComponent, decorators: [{
            type: Component,
            args: [{ selector: 'chip-list-autocomplete', standalone: true, imports: [
                        MatFormFieldModule,
                        MatChipsModule,
                        NgFor,
                        MatIconModule,
                        FormsModule,
                        MatAutocompleteModule,
                        ReactiveFormsModule,
                        MatOptionModule,
                        NgIf,
                        AsyncPipe,
                        FunctionCaller1,
                    ], template: "<mat-form-field class=\"example-chip-list\" appearance=\"fill\">\n    <mat-label>{{label}}</mat-label>\n    <mat-chip-grid #chipGrid attr.aria-label=\"{{label}} selection\">\n        <mat-chip-row *ngFor=\"let item of control.value;let i =index\" (removed)=\"remove(i)\">\n            {{(addedDataFormatter|functionCaller1:item|async)||item}}\n            <button matChipRemove [attr.aria-label]=\"'remove ' + item\">\n                <mat-icon>cancel</mat-icon>\n            </button>\n        </mat-chip-row>\n    </mat-chip-grid>\n    <input placeholder=\"{{placeholder||label}}\" #aInput [formControl]=\"autoCompleteCtrl\" [matChipInputFor]=\"chipGrid\"\n        [matAutocomplete]=\"auto\" [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n        (matChipInputTokenEnd)=\"add($event)\" />\n    <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"selected($event)\">\n        <mat-option *ngFor=\"let option of filteredOptions\" [value]=\"option.value\">\n            {{option.label}}\n        </mat-option>\n    </mat-autocomplete>\n</mat-form-field>\n<div class=\"text-danger\" *ngIf=\"message\">{{message}}</div>", styles: [".example-chip-list{width:100%;height:auto}.mat-mdc-form-field:focus-within input{background:transparent!important}.mat-mdc-form-field{background:transparent!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.InputService }, { type: i2.AutocompleteService }]; }, propDecorators: { filterFunc: [{
                type: Input
            }], fruitInput: [{
                type: ViewChild,
                args: ['fruitInput']
            }], addedDataFormatter: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,