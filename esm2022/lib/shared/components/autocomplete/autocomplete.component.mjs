import { Component, Input } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { merge } from 'rxjs';
import { debounceTime, filter, mergeMap, startWith } from 'rxjs/operators';
import { InputBasicComponent } from '../input/input.component';
import { ToAnyPipe } from '../../pipes/utility.pipe';
import { InputClassPipe } from '../input/inputs-pipes.pipe';
import { ValidationMessageComponent } from '../input/validation-message/validation-message.component';
import { MatTooltipModule } from '@angular/material/tooltip';
import { MatOptionModule } from '@angular/material/core';
import { SvgIconComponent } from '../svg-icon/svg-icon.component';
import { InfoIconComponent } from '../info-icon/info-icon.component';
import { NgIf, NgFor, NgClass } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "../input/input.service";
import * as i2 from "./autocomplete.service";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/material/autocomplete";
import * as i5 from "@angular/material/core";
import * as i6 from "@angular/material/tooltip";
export class AutocompleteComponent extends InputBasicComponent {
    constructor(iS, autoS) {
        super(iS);
        this.iS = iS;
        this.autoS = autoS;
        this.validate = true;
        this.displayWith = (val) => {
            return this.options?.find((x) => x.value == val)?.label || val;
        };
        this.includesOption = (control) => {
            const val = control?.value;
            if (!val)
                return null;
            if (!this.options || this.options.length === 0)
                return null;
            // debugger
            if (this.options.find((x) => x.value == val))
                return null;
            else
                return { notFound: true };
        };
    }
    ngOnInit() {
        super.ngOnInit();
        this.control?.addValidators(this.includesOption.bind(this));
        this.control?.valueChanges.subscribe((r) => {
            // debugger
            super.change({ target: { value: r } });
        });
        // this.options$.subscribe((r) => {
        //   if (this.debug) debugger;
        //   (this.control as FormControl)?.patchValue(this.control?.value,{emitEvent:false});
        //   if (this.control.disabled) this.control.disable({ emitEvent: false });
        // });
        merge(this.control.valueChanges.pipe(startWith('')), this.options$)
            .pipe(
        // filter((r) => !this.filterFunc),
        mergeMap((r) => this.autoS.filterOptions(this.control.value, this.options)))
            .subscribe((r) => {
            this.filteredOptions = r;
        });
        this.control.valueChanges
            .pipe(startWith(''))
            .pipe(debounceTime(1000), filter((r) => !!this.filterFunc), mergeMap((r) => this.filterFunc(this.control.value, this.options)))
            .subscribe((r) => {
            this._options = r;
        });
    }
    selected($event) {
        this.filteredOptions = this.options;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: AutocompleteComponent, deps: [{ token: i1.InputService }, { token: i2.AutocompleteService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.2", type: AutocompleteComponent, isStandalone: true, selector: "app-autocomplete", inputs: { validate: "validate", filterFunc: "filterFunc" }, usesInheritance: true, ngImport: i0, template: "<div class=\"row align-items-center\">\n  <div class=\"{{stacked?'col-12':'col-md'}} position-relative\">\n    <form [formGroup]=\"form|toAny\">\n\n      <div class=\"d-flex align-items-center mb-8\" *ngIf=\"showSeperateLabel\">{{label}}\n        <span *ngIf=\"hint\" class=\"ms-8\">\n          <info-icon [text]=\"hint\" />\n        </span>\n      </div>\n      <div class=\"position-relative\">\n        <div class=\"prefix-icon\" *ngIf=\"icon\">\n          <svg-icon [icon]=\"icon\" (click)=\"log()\"></svg-icon>\n        </div>\n        <input type=\"text\" data-noformat=\"true\" [formControlName]=\"name|toAny \" placeholder=\"{{placeholder||label}}\"\n          id=\"{{id}}\" [class]=\"inpCl|inputClass:valid:invalid:showValidation\" [required]=\"required\"\n          [readonly]=\"readonly\" #trigger=\"matAutocompleteTrigger\" [matAutocomplete]=\"auto\" #inp>\n        <i class=\"input-icon fa fa-chevron-down\" (click)=\"$event.stopPropagation(); trigger.openPanel()\"></i>\n        <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayWith\" (optionSelected)=\"selected($event)\">\n          <mat-option *ngIf=\"showEmptyOption\" [value]=\"null\">\n\n          </mat-option>\n          <mat-option *ngFor=\"let item of filteredOptions ; trackBy:iS.trackByValue\" [value]=\"item.value\">\n            <div class=\"option\" [matTooltip]=\"item.label\" [matTooltipDisabled]=\"ele.scrollWidth<=ele.offsetWidth\" #ele>\n              {{item.label}}</div>\n          </mat-option>\n        </mat-autocomplete>\n        <ng-container *ngIf=\"control?.dirty && showValidation && showValidationIcon \">\n          <div [ngClass]=\"{valid:control?.valid}\" class=\" validity-icon\"><i class=\"fa fa-check\"></i></div>\n          <div [ngClass]=\"{pending:control?.pending}\" class=\" validity-icon\"><i class=\"fa fa-spinner fa-spin\"></i></div>\n          <div [ngClass]=\"{invalid:control?.invalid}\" class=\" validity-icon\"><i class=\"fa fa-times\"></i></div>\n        </ng-container>\n      </div>\n    </form>\n  </div>\n</div>\n<app-validation-message *ngIf=\"showValidationMsg\" [control]=\"control\" [label]=\"label\"></app-validation-message>", styles: [".bordercheck{border:1px solid #4ef580;outline:0}.borderuncheck{border:1px solid red;outline:0}.light{font-weight:500}.validity-icon{display:none;position:absolute;top:0;left:unset;right:20px;height:100%;align-items:center}.select .validity-icon{right:30px}.valid{display:flex!important;color:#4ef580}.pending{display:flex!important;color:#ff4500}.invalid{display:flex!important;color:red}.inputform{height:41px}.invalid-label{color:red!important}textarea{width:100%;padding:16px}input[type=checkbox]:checked{position:relative}.showValidationIcon .form-control:not(input[type=checkbox].form-control),.showValidationIcon select.form-control:not(input[type=checkbox].form-control){padding:10px 36px 10px 12px}.password-icons{position:absolute;right:20px;top:17%}[disabled]{cursor:default}.link{cursor:pointer}::placeholder,.custom-input .mat-mdc-select,.mat-mdc-select-placeholder{color:#bdbdbd}::ng-deep .prefix-icon{color:#bdbdbd}::ng-deep .svg-icon{height:13px;width:13px}::ng-deep .showValidation .mat-mdc-form-field.ng-valid.ng-touched{border:1px solid #27ae60}::ng-deep .showValidation .mat-mdc-form-field.ng-valid.ng-touched .suffix-success .svg-icon{color:#27ae60}::ng-deep .showValidation .mat-form-field-invalid.ng-touched{border:1px solid #eb5757}::ng-deep .showValidation .mat-form-field-invalid.ng-touched .suffix-error .svg-icon{color:#eb5757}.showPassword{font-style:normal;font-weight:500;font-size:14px;line-height:19px;color:#bdbdbd}::ng-deep .dashboardInput{display:flex}::ng-deep .dashboardInput .mat-mdc-form-field{width:100%;height:auto;margin-top:0;margin-bottom:0;background:#fafafa;border:1px solid #f2f2f2;border-radius:8px;padding:8px 12px;--mdc-shape-small: 0}::ng-deep .dashboardInput .mat-mdc-form-field .mat-mdc-text-field-wrapper.mdc-text-field--outlined .mat-mdc-form-field-infix{height:auto;padding:0;color:#4f4f4f;font-weight:500;--mdc-typography-body1-font-size: 12px}.image-preview{height:200px;border-radius:16px}\n", "i.input-icon{position:absolute;top:calc((100% - 10px)/2);right:15px;opacity:.4;font-size:10px}.option{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}input{padding:11px 16px;font-style:normal;font-weight:500;font-size:16px;line-height:18px;width:100%;display:flex;align-items:center;height:51px;color:#828282}input:active,input:focus{background-color:#fff}\n"], dependencies: [{ kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: InfoIconComponent, selector: "info-icon", inputs: ["text", "coloured", "left", "right"] }, { kind: "component", type: SvgIconComponent, selector: "svg-icon", inputs: ["class", "icon"] }, { kind: "ngmodule", type: MatAutocompleteModule }, { kind: "component", type: i4.MatAutocomplete, selector: "mat-autocomplete", inputs: ["disableRipple", "hideSingleSelectionIndicator"], exportAs: ["matAutocomplete"] }, { kind: "component", type: i5.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { kind: "directive", type: i4.MatAutocompleteTrigger, selector: "input[matAutocomplete], textarea[matAutocomplete]", exportAs: ["matAutocompleteTrigger"] }, { kind: "ngmodule", type: MatOptionModule }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "ngmodule", type: MatTooltipModule }, { kind: "directive", type: i6.MatTooltip, selector: "[matTooltip]", exportAs: ["matTooltip"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "component", type: ValidationMessageComponent, selector: "app-validation-message", inputs: ["validationKey", "control", "input", "label", "minLength", "maxLength", "customMessage"] }, { kind: "pipe", type: InputClassPipe, name: "inputClass" }, { kind: "pipe", type: ToAnyPipe, name: "toAny" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: AutocompleteComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-autocomplete', standalone: true, imports: [
                        FormsModule,
                        ReactiveFormsModule,
                        NgIf,
                        InfoIconComponent,
                        SvgIconComponent,
                        MatAutocompleteModule,
                        MatOptionModule,
                        NgFor,
                        MatTooltipModule,
                        NgClass,
                        ValidationMessageComponent,
                        InputClassPipe,
                        ToAnyPipe,
                    ], template: "<div class=\"row align-items-center\">\n  <div class=\"{{stacked?'col-12':'col-md'}} position-relative\">\n    <form [formGroup]=\"form|toAny\">\n\n      <div class=\"d-flex align-items-center mb-8\" *ngIf=\"showSeperateLabel\">{{label}}\n        <span *ngIf=\"hint\" class=\"ms-8\">\n          <info-icon [text]=\"hint\" />\n        </span>\n      </div>\n      <div class=\"position-relative\">\n        <div class=\"prefix-icon\" *ngIf=\"icon\">\n          <svg-icon [icon]=\"icon\" (click)=\"log()\"></svg-icon>\n        </div>\n        <input type=\"text\" data-noformat=\"true\" [formControlName]=\"name|toAny \" placeholder=\"{{placeholder||label}}\"\n          id=\"{{id}}\" [class]=\"inpCl|inputClass:valid:invalid:showValidation\" [required]=\"required\"\n          [readonly]=\"readonly\" #trigger=\"matAutocompleteTrigger\" [matAutocomplete]=\"auto\" #inp>\n        <i class=\"input-icon fa fa-chevron-down\" (click)=\"$event.stopPropagation(); trigger.openPanel()\"></i>\n        <mat-autocomplete #auto=\"matAutocomplete\" [displayWith]=\"displayWith\" (optionSelected)=\"selected($event)\">\n          <mat-option *ngIf=\"showEmptyOption\" [value]=\"null\">\n\n          </mat-option>\n          <mat-option *ngFor=\"let item of filteredOptions ; trackBy:iS.trackByValue\" [value]=\"item.value\">\n            <div class=\"option\" [matTooltip]=\"item.label\" [matTooltipDisabled]=\"ele.scrollWidth<=ele.offsetWidth\" #ele>\n              {{item.label}}</div>\n          </mat-option>\n        </mat-autocomplete>\n        <ng-container *ngIf=\"control?.dirty && showValidation && showValidationIcon \">\n          <div [ngClass]=\"{valid:control?.valid}\" class=\" validity-icon\"><i class=\"fa fa-check\"></i></div>\n          <div [ngClass]=\"{pending:control?.pending}\" class=\" validity-icon\"><i class=\"fa fa-spinner fa-spin\"></i></div>\n          <div [ngClass]=\"{invalid:control?.invalid}\" class=\" validity-icon\"><i class=\"fa fa-times\"></i></div>\n        </ng-container>\n      </div>\n    </form>\n  </div>\n</div>\n<app-validation-message *ngIf=\"showValidationMsg\" [control]=\"control\" [label]=\"label\"></app-validation-message>", styles: [".bordercheck{border:1px solid #4ef580;outline:0}.borderuncheck{border:1px solid red;outline:0}.light{font-weight:500}.validity-icon{display:none;position:absolute;top:0;left:unset;right:20px;height:100%;align-items:center}.select .validity-icon{right:30px}.valid{display:flex!important;color:#4ef580}.pending{display:flex!important;color:#ff4500}.invalid{display:flex!important;color:red}.inputform{height:41px}.invalid-label{color:red!important}textarea{width:100%;padding:16px}input[type=checkbox]:checked{position:relative}.showValidationIcon .form-control:not(input[type=checkbox].form-control),.showValidationIcon select.form-control:not(input[type=checkbox].form-control){padding:10px 36px 10px 12px}.password-icons{position:absolute;right:20px;top:17%}[disabled]{cursor:default}.link{cursor:pointer}::placeholder,.custom-input .mat-mdc-select,.mat-mdc-select-placeholder{color:#bdbdbd}::ng-deep .prefix-icon{color:#bdbdbd}::ng-deep .svg-icon{height:13px;width:13px}::ng-deep .showValidation .mat-mdc-form-field.ng-valid.ng-touched{border:1px solid #27ae60}::ng-deep .showValidation .mat-mdc-form-field.ng-valid.ng-touched .suffix-success .svg-icon{color:#27ae60}::ng-deep .showValidation .mat-form-field-invalid.ng-touched{border:1px solid #eb5757}::ng-deep .showValidation .mat-form-field-invalid.ng-touched .suffix-error .svg-icon{color:#eb5757}.showPassword{font-style:normal;font-weight:500;font-size:14px;line-height:19px;color:#bdbdbd}::ng-deep .dashboardInput{display:flex}::ng-deep .dashboardInput .mat-mdc-form-field{width:100%;height:auto;margin-top:0;margin-bottom:0;background:#fafafa;border:1px solid #f2f2f2;border-radius:8px;padding:8px 12px;--mdc-shape-small: 0}::ng-deep .dashboardInput .mat-mdc-form-field .mat-mdc-text-field-wrapper.mdc-text-field--outlined .mat-mdc-form-field-infix{height:auto;padding:0;color:#4f4f4f;font-weight:500;--mdc-typography-body1-font-size: 12px}.image-preview{height:200px;border-radius:16px}\n", "i.input-icon{position:absolute;top:calc((100% - 10px)/2);right:15px;opacity:.4;font-size:10px}.option{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}input{padding:11px 16px;font-style:normal;font-weight:500;font-size:16px;line-height:18px;width:100%;display:flex;align-items:center;height:51px;color:#828282}input:active,input:focus{background-color:#fff}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.InputService }, { type: i2.AutocompleteService }]; }, propDecorators: { validate: [{
                type: Input
            }], filterFunc: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,