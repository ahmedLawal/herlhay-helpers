import { Component, EventEmitter, Input, Output, forwardRef, } from '@angular/core';
import { FormArray, FormControl, FormGroup, FormsModule } from '@angular/forms';
import { cloneDeep } from 'lodash-es';
import { InputBasicComponent } from '../input/input.component';
import { ResponseCardComponent } from '../response-card/response-card.component';
import { FunctionCaller2, ToAnyPipe } from '../../pipes/utility.pipe';
import { BtnComponent } from '../btn/btn.component';
import { MatExpansionModule } from '@angular/material/expansion';
import { AutocompleteComponent } from '../autocomplete/autocomplete.component';
import { FeedbackCardComponent } from '../feedback-card/feedback-card.component';
import { NgIf, NgFor, NgSwitch, NgSwitchCase, NgSwitchDefault, AsyncPipe, } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/utility.service";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/material/expansion";
export class FormGeneratorComponent {
    set _formSchema(v) {
        if (v)
            this.init(v);
    }
    constructor(uS) {
        this.uS = uS;
        this.keyField = 'field';
        this.onSubmit = new EventEmitter();
        this._submissionResponse = new EventEmitter();
        this.submitBtnText = 'Submit';
        this.submitSuccessText = 'Save';
        this.showSubmitBtn = true;
        this.gridStyle = '1';
        this.gridMDStyle = '1';
        this.gridLGStyle = '1';
        this.gridXXLStyle = '1';
        this.optionsMap = {};
        this.cellCountryCode3s = {};
    }
    ngOnInit() { }
    init(schema) {
        for (const scheme of schema) {
            // scheme.form = this.form || scheme.form;
            scheme.id = 'id' + this.uS.genRandomID;
            if (this.showSeparateLabels)
                scheme.showSeperateLabel = this.showSeparateLabels;
            if (scheme.autoPickValueField == null &&
                (!scheme.valueField || !scheme.labelField))
                scheme.autoPickValueField = true;
            if (scheme.optionsInitFunc) {
                scheme.optionsInitFunc().subscribe((r) => {
                    scheme.options = r;
                    // this.optionsMap[scheme.field] = r;
                });
            }
            if (scheme.sub?.length) {
                // debugger
                // scheme.label="fwefwrefwr"
                scheme.label = scheme.label || 'Item';
                if (!scheme.form) {
                    const form = new FormGroup({});
                    for (const subField of scheme.sub) {
                        form.addControl(subField.field?.toString(), new FormControl());
                    }
                    scheme.form = form;
                }
                if (!this.form.controls[scheme.field?.toString()])
                    this.form.addControl(scheme.field?.toString(), new FormArray([]));
                if (scheme.initData?.length)
                    if (Array.isArray(scheme.initData) && scheme.initData?.length)
                        scheme.initData?.forEach((x) => this.addItem(scheme, x));
                    else
                        this.addItem(scheme);
            }
        }
        this.formSchema = schema
            .filter((x) => !x.sub?.length)
            .concat(schema.filter((x) => x.sub?.length));
    }
    ngAfterViewInit() {
        for (const scheme of this.formSchema) {
            if (scheme.onChangeFunc) {
                this.form.controls[scheme.field].updateValueAndValidity();
            }
        }
    }
    amendFormScheme(fieldName, formScheme) {
        const ind = this.formSchema.findIndex((x) => x.field == fieldName);
        if (ind > -1) {
            this.formSchema[ind] = {
                ...this.formSchema[ind],
                ...formScheme,
            };
            // const fs = this.formSchema[ind];
            // debugger;
            // this.formSchema[ind].options = formScheme.options;
            // debugger;
        }
    }
    onChange(field, inp) {
        if (field.onChangeFunc)
            setTimeout(() => {
                field.onChangeFunc(this.form.getRawValue(), field.field, this, inp);
            }, 600);
    }
    addItem(scheme, data) {
        const form = cloneDeep(scheme.form);
        form.reset();
        if (data)
            form.patchValue(data);
        this.form?.controls[scheme?.field?.toString()]?.controls.push(form);
    }
    removeItem(index, formName) {
        this.form?.controls[formName?.toString()]?.removeAt(index);
    }
    async submit(rc) {
        if (this.submitFunc) {
            this.loading = true;
            this.errorMessage = null;
            this.hasResponse = null;
            this.onSubmit.emit(this.form.value);
            rc.resetStatus();
            try {
                this.submissionResponse = await this.submitFunc(this.form.value, this);
                this._submissionResponse.emit(this.submissionResponse);
                rc.status = 1;
                rc.showResponse = true;
            }
            catch (error) {
                // debugger;
                this.errorMessage = error;
                // rc.status = 0;
            }
            this.hasResponse = true;
            this.loading = false;
        }
        else
            this.onSubmit.emit(this.form.value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: FormGeneratorComponent, deps: [{ token: i1.UtilityService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.2", type: FormGeneratorComponent, isStandalone: true, selector: "form-generator", inputs: { keyField: "keyField", submitFunc: "submitFunc", submitBtnText: "submitBtnText", submitSuccessText: "submitSuccessText", showSubmitBtn: "showSubmitBtn", isShow: "isShow", gridStyle: "gridStyle", gridMDStyle: "gridMDStyle", gridLGStyle: "gridLGStyle", gridXXLStyle: "gridXXLStyle", useLoader: "useLoader", loading: "loading", showSeparateLabels: "showSeparateLabels", hasResponse: "hasResponse", hideResponseCard: "hideResponseCard", responseHeader: "responseHeader", form: "form", submitForm: "submitForm", _formSchema: ["formSchema", "_formSchema"] }, outputs: { onSubmit: "onSubmit", _submissionResponse: "submissionResponse" }, ngImport: i0, template: "<response-card #rc [status]=\"1\" [header]=\"responseHeader\" [hidden]=\"hideResponseCard||!hasResponse ||errorMessage\">\n  <ng-content select=\"[response]\" />\n</response-card>\n<feedback-card #fc [message]=\"errorMessage\" *ngIf=\"errorMessage\" />\n<form [hidden]=\"!hideResponseCard && hasResponse && !errorMessage\">\n  <div\n    class=\"form-grid row row-cols-{{gridStyle}} row-cols-lg-{{gridLGStyle}} row-cols-md-{{gridMDStyle}} row-cols-xxl-{{gridXXLStyle}} align-items-center\">\n    <ng-container *ngFor=\"let scheme of formSchema;trackBy:uS.trackByID\">\n      <div class=\"col {{scheme.cls}} \" *ngIf=\"(!scheme.hideIfFunc || !scheme.hideIfFunc(form.value)) && !scheme.hidden\">\n        <ng-container [ngSwitch]=\"true\">\n          <!-- <ng-container *ngSwitchCase=\"scheme.type == 'tel'\">\n            <app-phone-number [form]=\"form\" [label]=\"scheme.label\" [clearOnDisable]=\"scheme.clearOnDisable\"\n              [name]=\"scheme.field\" [showLabel]=\"false\" [noFormat]=\"scheme.noFormat\"\n              [showValidation]=\"scheme.showValidation\" [autoPickValueField]=\"scheme.autoPickValueField\"\n              [showValidationIcon]=\"scheme.showValidationIcon\" [countryCode3]=\"\n                        cellCountryCode3s[scheme.getCountryCode3Key] || scheme.countryCode3\n                      \" [disabled]=\"scheme.disabled||\n                        (scheme.disabledIf\n                          | functionCaller2: form.value:scheme.field)\n                      \" #inputTag>\n            </app-phone-number>\n          </ng-container> -->\n          <ng-container *ngSwitchCase=\"scheme.type == 'autocomplete'\">\n            <app-autocomplete [form]=\"form\" [placeholder]=\"scheme.placeholder\" [label]=\"scheme.label\"\n              [clearOnDisable]=\"scheme.clearOnDisable\" [showSeperateLabel]=\"scheme.showSeperateLabel\"\n              [labelField]=\"scheme.labelField\" [noFormat]=\"scheme.noFormat\" [labelType]=\"scheme.labelType\"\n              [name]=\"scheme.field\" [optionFormatter]=\"scheme.optionFormatter\" [valueField]=\"scheme.valueField\"\n              [showEmptyOption]=\"scheme.showEmptyOption\" (mchange)=\"onChange(scheme,inputTag)\"\n              (validityChecked)=\"onChange(scheme,inputTag)\" [icon]=\"scheme.icon\"\n              [autoPickValueField]=\"scheme.autoPickValueField\" [options]=\"\n                        (scheme.optionsFunc\n                          | functionCaller2: form.value:scheme.field\n                          | async) || scheme.options||optionsMap[scheme.field|toAny]\n                      \" [hint]=\"scheme.hint\" [disabled]=\"scheme.disabled||\n                      (  scheme.disabledIf\n                          | functionCaller2: form.value:scheme.field)\n                      \" #inputTag />\n          </ng-container>\n          <ng-container *ngSwitchCase=\"scheme.sub?.length>0\">\n            <mat-accordion>\n              <ng-container *ngFor=\"let subForm of form?.controls[scheme.field|toAny]['controls'];let fi = index\">\n                <div class=\"d-flex justify-content-end\" *ngIf=\"!isShow\">\n                  <app-btn class=\" \" text=\"Remove {{scheme.label}} {{fi+1}}\" [mini]=\"true\" type=\"clear\" mclass=\"\"\n                    icon=\"delete\" (mclick)=\"removeItem(fi,scheme.field)\" />\n                </div>\n                <mat-expansion-panel>\n                  <mat-expansion-panel-header>\n                    {{scheme.label}} {{fi+1}}\n                  </mat-expansion-panel-header>\n                  <form-generator [showSubmitBtn]=\"false\" [form]=\"subForm\" [formSchema]=\"scheme.sub\" />\n                </mat-expansion-panel>\n              </ng-container>\n            </mat-accordion>\n            <div class=\"mt-8 d-flex\" *ngIf=\"!isShow\">\n              <app-btn class=\" \" text=\"Add {{scheme.label}} {{form?.controls[scheme.field|toAny]['length']+1}}\"\n                [mini]=\"true\" type=\"clear\" mclass=\"text-primary\" icon=\"add\" (mclick)=\"addItem(scheme)\" />\n            </div>\n\n          </ng-container>\n          <ng-container *ngSwitchDefault>\n            <app-input #formField [name]=\"scheme.field\" [form]=\"form\" [clearOnDisable]=\"scheme.clearOnDisable\"\n              [type]=\"scheme.type\" [valueField]=\"scheme.valueField\" [autoPickValueField]=\"scheme.autoPickValueField\"\n              [labelType]=\"scheme.labelType\" [checked]=\"scheme.checked\" [showValidation]=\"scheme.showValidation\"\n              [prefix]=\"scheme.prefix\" [icon]=\"scheme.icon\" [noFormat]=\"scheme.noFormat\" \n              [showValidationIcon]=\"scheme.showValidationIcon\" [startField]=\"scheme.startField\"\n              [endField]=\"scheme.endField\" [noPaste]=\"scheme.noPaste\" [showSeperateLabel]=\"scheme.showSeperateLabel\"\n              [labelField]=\"scheme.labelField\" [optionFormatter]=\"scheme.optionFormatter\"\n              (mchange)=\"onChange(scheme,formField)\" (validityChecked)=\"onChange(scheme,formField)\"\n              [options]=\"(scheme.optionsFunc|functionCaller2:form.value:scheme.field|async)||scheme.options||optionsMap[scheme.field|toAny]\"\n              [decimalPoints]=\"scheme.decimalPoints\" [hint]=\"scheme.hint\" [max]=\"scheme.max\" [min]=\"scheme.min\"\n              [placeholder]=\"scheme.placeholder\" [label]=\"scheme.label\"\n              [disabled]=\"scheme.disabled||(scheme.disabledIf|functionCaller2:form.value:scheme.field)\" />\n          </ng-container>\n        </ng-container>\n      </div>\n    </ng-container>\n  </div>\n  <div class=\"sub-btn\" *ngIf=\"showSubmitBtn\">\n    <app-btn [text]=\"submitBtnText\" group=\"submit\" actionType=\"submit\" [form]=\"submitForm||form\" [loading]=\"loading\"\n      (mclick)=\"submit(rc)\">\n    </app-btn>\n  </div>\n</form>", styles: [".sub-btn{margin-top:16px}.form-grid{--bs-gutter-y: 16px;--bs-gutter-x: 16px}\n"], dependencies: [{ kind: "component", type: i0.forwardRef(function () { return FormGeneratorComponent; }), selector: "form-generator", inputs: ["keyField", "submitFunc", "submitBtnText", "submitSuccessText", "showSubmitBtn", "isShow", "gridStyle", "gridMDStyle", "gridLGStyle", "gridXXLStyle", "useLoader", "loading", "showSeparateLabels", "hasResponse", "hideResponseCard", "responseHeader", "form", "submitForm", "formSchema"], outputs: ["onSubmit", "submissionResponse"] }, { kind: "component", type: i0.forwardRef(function () { return ResponseCardComponent; }), selector: "response-card", inputs: ["header", "showResponse", "status"] }, { kind: "directive", type: i0.forwardRef(function () { return NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i0.forwardRef(function () { return FeedbackCardComponent; }), selector: "feedback-card", inputs: ["class", "message", "status"] }, { kind: "ngmodule", type: i0.forwardRef(function () { return FormsModule; }) }, { kind: "directive", type: i0.forwardRef(function () { return i2.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i0.forwardRef(function () { return i2.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i0.forwardRef(function () { return i2.NgForm; }), selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i0.forwardRef(function () { return NgFor; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i0.forwardRef(function () { return NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i0.forwardRef(function () { return NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "component", type: i0.forwardRef(function () { return AutocompleteComponent; }), selector: "app-autocomplete", inputs: ["validate", "filterFunc"] }, { kind: "ngmodule", type: i0.forwardRef(function () { return MatExpansionModule; }) }, { kind: "directive", type: i0.forwardRef(function () { return i3.MatAccordion; }), selector: "mat-accordion", inputs: ["multi", "hideToggle", "displayMode", "togglePosition"], exportAs: ["matAccordion"] }, { kind: "component", type: i0.forwardRef(function () { return i3.MatExpansionPanel; }), selector: "mat-expansion-panel", inputs: ["disabled", "expanded", "hideToggle", "togglePosition"], outputs: ["opened", "closed", "expandedChange", "afterExpand", "afterCollapse"], exportAs: ["matExpansionPanel"] }, { kind: "component", type: i0.forwardRef(function () { return i3.MatExpansionPanelHeader; }), selector: "mat-expansion-panel-header", inputs: ["tabIndex", "expandedHeight", "collapsedHeight"] }, { kind: "component", type: i0.forwardRef(function () { return BtnComponent; }), selector: "app-btn,btn", inputs: ["formSchema", "icon", "type", "group", "actionType", "animate", "badge", "class", "customIcon", "disabled", "form", "help", "iconBtn", "lite", "loading", "mclass", "showHelpIcon", "mini", "text", "valid", "subButtons", "onFormInvalid"], outputs: ["mclick"] }, { kind: "directive", type: i0.forwardRef(function () { return NgSwitchDefault; }), selector: "[ngSwitchDefault]" }, { kind: "component", type: i0.forwardRef(function () { return InputBasicComponent; }), selector: "app-input", inputs: ["accept", "autocomplete", "autoPickValueField", "clearOnDisable", "cls", "colored", "checked", "contextData", "dashboardInput", "debug", "decimalPoints", "endLabel", "endLabelTooltip", "files", "form", "noFormat", "hide", "hint", "icon", "id", "inpCl", "label", "labelLink", "labelField", "labelType", "lblCl", "light", "loading", "max", "min", "mini", "multiple", "name", "optionFormatter", "optionsInitFunc", "placeholder", "prefix", "startField", "endField", "readonly", "required", "noPaste", "showEmptyOption", "showLabel", "showSeperateLabel", "showValidation", "showValidationMsg", "showValidationIcon", "small", "stacked", "suffix", "theme", "translateOptions", "valueField", "vms", "xsmall", "appearance", "validationKey", "disabled", "customSelectChangeAction", "options", "type", "mvalue"], outputs: ["mchange", "validityChecked", "mSelectOptionChange", "mContextChange"] }, { kind: "pipe", type: i0.forwardRef(function () { return AsyncPipe; }), name: "async" }, { kind: "pipe", type: i0.forwardRef(function () { return FunctionCaller2; }), name: "functionCaller2" }, { kind: "pipe", type: i0.forwardRef(function () { return ToAnyPipe; }), name: "toAny" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: FormGeneratorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'form-generator', standalone: true, imports: [
                        ResponseCardComponent,
                        NgIf,
                        FeedbackCardComponent,
                        FormsModule,
                        NgFor,
                        NgSwitch,
                        NgSwitchCase,
                        AutocompleteComponent,
                        MatExpansionModule,
                        BtnComponent,
                        forwardRef(() => FormGeneratorComponent),
                        NgSwitchDefault,
                        InputBasicComponent,
                        AsyncPipe,
                        FunctionCaller2,
                        ToAnyPipe,
                    ], template: "<response-card #rc [status]=\"1\" [header]=\"responseHeader\" [hidden]=\"hideResponseCard||!hasResponse ||errorMessage\">\n  <ng-content select=\"[response]\" />\n</response-card>\n<feedback-card #fc [message]=\"errorMessage\" *ngIf=\"errorMessage\" />\n<form [hidden]=\"!hideResponseCard && hasResponse && !errorMessage\">\n  <div\n    class=\"form-grid row row-cols-{{gridStyle}} row-cols-lg-{{gridLGStyle}} row-cols-md-{{gridMDStyle}} row-cols-xxl-{{gridXXLStyle}} align-items-center\">\n    <ng-container *ngFor=\"let scheme of formSchema;trackBy:uS.trackByID\">\n      <div class=\"col {{scheme.cls}} \" *ngIf=\"(!scheme.hideIfFunc || !scheme.hideIfFunc(form.value)) && !scheme.hidden\">\n        <ng-container [ngSwitch]=\"true\">\n          <!-- <ng-container *ngSwitchCase=\"scheme.type == 'tel'\">\n            <app-phone-number [form]=\"form\" [label]=\"scheme.label\" [clearOnDisable]=\"scheme.clearOnDisable\"\n              [name]=\"scheme.field\" [showLabel]=\"false\" [noFormat]=\"scheme.noFormat\"\n              [showValidation]=\"scheme.showValidation\" [autoPickValueField]=\"scheme.autoPickValueField\"\n              [showValidationIcon]=\"scheme.showValidationIcon\" [countryCode3]=\"\n                        cellCountryCode3s[scheme.getCountryCode3Key] || scheme.countryCode3\n                      \" [disabled]=\"scheme.disabled||\n                        (scheme.disabledIf\n                          | functionCaller2: form.value:scheme.field)\n                      \" #inputTag>\n            </app-phone-number>\n          </ng-container> -->\n          <ng-container *ngSwitchCase=\"scheme.type == 'autocomplete'\">\n            <app-autocomplete [form]=\"form\" [placeholder]=\"scheme.placeholder\" [label]=\"scheme.label\"\n              [clearOnDisable]=\"scheme.clearOnDisable\" [showSeperateLabel]=\"scheme.showSeperateLabel\"\n              [labelField]=\"scheme.labelField\" [noFormat]=\"scheme.noFormat\" [labelType]=\"scheme.labelType\"\n              [name]=\"scheme.field\" [optionFormatter]=\"scheme.optionFormatter\" [valueField]=\"scheme.valueField\"\n              [showEmptyOption]=\"scheme.showEmptyOption\" (mchange)=\"onChange(scheme,inputTag)\"\n              (validityChecked)=\"onChange(scheme,inputTag)\" [icon]=\"scheme.icon\"\n              [autoPickValueField]=\"scheme.autoPickValueField\" [options]=\"\n                        (scheme.optionsFunc\n                          | functionCaller2: form.value:scheme.field\n                          | async) || scheme.options||optionsMap[scheme.field|toAny]\n                      \" [hint]=\"scheme.hint\" [disabled]=\"scheme.disabled||\n                      (  scheme.disabledIf\n                          | functionCaller2: form.value:scheme.field)\n                      \" #inputTag />\n          </ng-container>\n          <ng-container *ngSwitchCase=\"scheme.sub?.length>0\">\n            <mat-accordion>\n              <ng-container *ngFor=\"let subForm of form?.controls[scheme.field|toAny]['controls'];let fi = index\">\n                <div class=\"d-flex justify-content-end\" *ngIf=\"!isShow\">\n                  <app-btn class=\" \" text=\"Remove {{scheme.label}} {{fi+1}}\" [mini]=\"true\" type=\"clear\" mclass=\"\"\n                    icon=\"delete\" (mclick)=\"removeItem(fi,scheme.field)\" />\n                </div>\n                <mat-expansion-panel>\n                  <mat-expansion-panel-header>\n                    {{scheme.label}} {{fi+1}}\n                  </mat-expansion-panel-header>\n                  <form-generator [showSubmitBtn]=\"false\" [form]=\"subForm\" [formSchema]=\"scheme.sub\" />\n                </mat-expansion-panel>\n              </ng-container>\n            </mat-accordion>\n            <div class=\"mt-8 d-flex\" *ngIf=\"!isShow\">\n              <app-btn class=\" \" text=\"Add {{scheme.label}} {{form?.controls[scheme.field|toAny]['length']+1}}\"\n                [mini]=\"true\" type=\"clear\" mclass=\"text-primary\" icon=\"add\" (mclick)=\"addItem(scheme)\" />\n            </div>\n\n          </ng-container>\n          <ng-container *ngSwitchDefault>\n            <app-input #formField [name]=\"scheme.field\" [form]=\"form\" [clearOnDisable]=\"scheme.clearOnDisable\"\n              [type]=\"scheme.type\" [valueField]=\"scheme.valueField\" [autoPickValueField]=\"scheme.autoPickValueField\"\n              [labelType]=\"scheme.labelType\" [checked]=\"scheme.checked\" [showValidation]=\"scheme.showValidation\"\n              [prefix]=\"scheme.prefix\" [icon]=\"scheme.icon\" [noFormat]=\"scheme.noFormat\" \n              [showValidationIcon]=\"scheme.showValidationIcon\" [startField]=\"scheme.startField\"\n              [endField]=\"scheme.endField\" [noPaste]=\"scheme.noPaste\" [showSeperateLabel]=\"scheme.showSeperateLabel\"\n              [labelField]=\"scheme.labelField\" [optionFormatter]=\"scheme.optionFormatter\"\n              (mchange)=\"onChange(scheme,formField)\" (validityChecked)=\"onChange(scheme,formField)\"\n              [options]=\"(scheme.optionsFunc|functionCaller2:form.value:scheme.field|async)||scheme.options||optionsMap[scheme.field|toAny]\"\n              [decimalPoints]=\"scheme.decimalPoints\" [hint]=\"scheme.hint\" [max]=\"scheme.max\" [min]=\"scheme.min\"\n              [placeholder]=\"scheme.placeholder\" [label]=\"scheme.label\"\n              [disabled]=\"scheme.disabled||(scheme.disabledIf|functionCaller2:form.value:scheme.field)\" />\n          </ng-container>\n        </ng-container>\n      </div>\n    </ng-container>\n  </div>\n  <div class=\"sub-btn\" *ngIf=\"showSubmitBtn\">\n    <app-btn [text]=\"submitBtnText\" group=\"submit\" actionType=\"submit\" [form]=\"submitForm||form\" [loading]=\"loading\"\n      (mclick)=\"submit(rc)\">\n    </app-btn>\n  </div>\n</form>", styles: [".sub-btn{margin-top:16px}.form-grid{--bs-gutter-y: 16px;--bs-gutter-x: 16px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.UtilityService }]; }, propDecorators: { keyField: [{
                type: Input
            }], onSubmit: [{
                type: Output
            }], _submissionResponse: [{
                type: Output,
                args: ['submissionResponse']
            }], submitFunc: [{
                type: Input
            }], submitBtnText: [{
                type: Input
            }], submitSuccessText: [{
                type: Input
            }], showSubmitBtn: [{
                type: Input
            }], isShow: [{
                type: Input
            }], gridStyle: [{
                type: Input
            }], gridMDStyle: [{
                type: Input
            }], gridLGStyle: [{
                type: Input
            }], gridXXLStyle: [{
                type: Input
            }], useLoader: [{
                type: Input
            }], loading: [{
                type: Input
            }], showSeparateLabels: [{
                type: Input
            }], hasResponse: [{
                type: Input
            }], hideResponseCard: [{
                type: Input
            }], responseHeader: [{
                type: Input
            }], form: [{
                type: Input
            }], submitForm: [{
                type: Input
            }], _formSchema: [{
                type: Input,
                args: ['formSchema']
            }] } });
//# sourceMappingURL=data:application/json;base64,