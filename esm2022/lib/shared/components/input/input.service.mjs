import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class InputService {
    constructor() {
        this.defaultValue = {
            showSeperateLabel: true,
            showValidationMsg: true,
        };
        this.labeller = (field1, field2) => {
            // debugger;
            field1 = field1?.toString()?.trim();
            field2 = field2?.toString()?.trim();
            if (field1 != null && field2 != null)
                return { value: field1, label: field1 + ' - ' + field2 };
            else
                return { value: field1, label: field1 || field2 };
        };
        this.optionsFormatter = (options, valueField, formatter, labelType, labelField, autoPickValueField) => {
            if (!options?.length)
                return [];
            if (formatter)
                return options.map((option) => ({
                    value: valueField && option ? option[valueField] : option,
                    label: formatter(option),
                }));
            if (labelType)
                return options.map((option) => {
                    const formattedOption = this.optionLabellerFunctions[labelType](option);
                    return {
                        value: valueField
                            ? option[valueField]
                            : autoPickValueField
                                ? formattedOption.value
                                : option,
                        label: formattedOption.label,
                    };
                });
            if (labelField)
                return options.map((option) => ({
                    value: valueField ? option[valueField] : option,
                    label: option[labelField],
                }));
            return options.map((option) => ({ value: option, label: option }));
        };
        const labeller = this.labeller;
        this.optionLabellerFunctions = {
            bnk: (option) => labeller(option?.accountName +
                '  |  ' +
                option?.accountNo +
                '  |  ' +
                option?.bankName +
                '  |  ' +
                option?.no, null),
            ccd: (option) => labeller(option?.companyCode, option?.description),
            cd: (option) => labeller(option?.code, option?.description),
            cdt: (option) => labeller(option?.code, option?.description || option?.title),
            cf: (option) => labeller(option?.code, option?.fullName),
            cmd: (option) => labeller(option?.company, option?.description),
            cn: (option) => labeller(option?.code, option?.name),
            ct: (option) => labeller(option?.code, option?.title),
            gd: (option) => labeller(option?.group, option?.description),
            ha: (option) => labeller(option?.hierAgentNo, option?.agentName),
            id: (option) => labeller(option?.id, option?.description),
            if: (option) => labeller(option?.id, option?.fullName),
            ifl: (option) => labeller(option?.userId, `${option?.firstName} ${option?.lastName}`),
            it: (option) => labeller(option?.id, option?.title),
            md: (option) => labeller(option?.mktEventCode, option?.description),
            pd: (option) => labeller(option?.payoutMethod, option?.description),
            nf: (option) => labeller(option?.no, option?.fullName),
            td: (option) => labeller(option?.type, option?.description),
            ud: (option) => labeller(option?.userMenu, option?.description),
            uf: (option) => labeller(option?.userName, option?.fullName),
            vl: (option) => labeller(null, option?.label),
            vv: (option) => labeller(option?.versionNo, option?.versionDate),
        };
    }
    trackByValue(index, item) {
        return item.value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: InputService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: InputService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: InputService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,