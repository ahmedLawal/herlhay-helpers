import { FormArray } from '@angular/forms';
import { cloneDeep } from 'lodash-es';
// declare interface String {
//   stripSlash(): string;
//   lastStripSlash(): string;
//   unStrip(): string;
// }
//#region  string */
String.prototype.stripChar = function (character = '/') {
    return (this + '').replace(character, '');
};
String.prototype.lastStripChar = function (character = '/') {
    return this[this?.length - 1] == character
        ? this.slice(0, this.length - 1)
        : this;
};
String.prototype.unChar = function (character = '/', replacement = '') {
    let te = '';
    for (let i = 0; i < this.length; i++) {
        const e = this[i];
        te += e != character ? e : '';
    }
    return te.split(character).join(replacement);
};
String.prototype.toSentenceCase = function () {
    return this.replace(/([A-Z])/g, ' $1');
};
String.prototype.replaceAllSubStr = function (character = '/', replacement = '') {
    return this.split(character).join(replacement);
};
String.prototype.addPrecedingChar = function (character, expectedLength) {
    if (this.length >= expectedLength)
        return this;
    return character.repeat(expectedLength - this.length) + this;
};
String.prototype.toCamelCase = function () {
    return this.replace(/(?:^\w|[A-Z]|\b\w|\s+)/g, function (match, index) {
        if (+match === 0)
            return ''; // or if (/\s+/.test(match)) for white spaces
        return index === 0 ? match.toLowerCase() : match.toUpperCase();
    });
};
String.prototype.toTitleCase = function () {
    const result = this.replace(/([A-Z])/g, ' $1');
    return result.charAt(0).toUpperCase() + result.slice(1);
};
//#endregion
//#region  array */
Array.prototype.merge = function () {
    let r = '';
    for (const i of this) {
        r += i;
    }
    return r;
};
Array.prototype.reverseIndex = function (index = 0) {
    return this[this?.length - (1 + index)];
};
Array.prototype.lastItem = function () {
    return this.reverseIndex();
};
Array.prototype.sort2 = function (field, isString = true, reverse = false) {
    if (reverse) {
        return isString
            ? this.filter((x) => x).sort((b, a) => sortAlphaNum(a[field], b[field]))
            : this.filter((x) => x).sort((b, a) => (+a[field] || 0) - (+b[field] || 0));
    }
    else {
        return isString
            ? this.filter((x) => x).sort((a, b) => sortAlphaNum(a[field], b[field]))
            : this.filter((x) => x).sort((a, b) => (+a[field] || 0) - (+b[field] || 0));
    }
};
var reA = /[^a-zA-Z]/g;
var reN = /[^0-9]/g;
function sortAlphaNum(a, b) {
    var aA = a?.toLowerCase()?.replace(reA, '');
    var bA = b?.toLowerCase()?.replace(reA, '');
    if (aA === bA) {
        var aN = parseInt(a?.replace(reN, ''), 10);
        var bN = parseInt(b?.replace(reN, ''), 10);
        return aN === bN ? 0 : aN > bN ? 1 : -1;
    }
    else {
        return aA > bA ? 1 : -1;
    }
}
Array.prototype.removeEmptyItems = function (expectedFields, config) {
    // debugger;
    const ignoreBooleanFields = config?.ignoreBooleanFields == true;
    const fieldsType = config?.fieldsType || 'included';
    if (!this.length)
        return this;
    let fieldList;
    if (fieldsType == 'included')
        fieldList = expectedFields?.length
            ? expectedFields
            : Object.keys(this[0]);
    else if (fieldsType == 'excluded')
        fieldList = expectedFields?.length
            ? Object.keys(this[0]).filter((x) => !expectedFields.includes(x))
            : Object.keys(this[0]);
    const removedItems = [];
    if (fieldList) {
        for (let i = 0; i < this.length; i++) {
            if (ignoreBooleanFields && i == 0) {
                fieldList = fieldList.filter((f) => typeof this[0][f] != 'boolean');
            }
            const item = this[i];
            if (fieldList.some((f) => item[f] != null))
                continue;
            removedItems.push(...this.splice(i, 1));
            i = i--;
        }
    }
    return removedItems;
};
//#endregion
//#region Function
Function.prototype.clone = function () {
    var that = this;
    var temp = function temporary() {
        return that.apply(this, arguments);
    };
    for (var key in this) {
        if (this.hasOwnProperty(key)) {
            temp[key] = this[key];
        }
    }
    return temp;
};
//#endregion
//#region FORMARRAY
FormArray.prototype.cAddItem = function (index, val) {
    const form = cloneDeep(this.cFormStructure);
    if (val) {
        form.patchValue(val);
    }
    this.insert(index, form);
    return this;
};
FormArray.prototype.cRemoveItem = function (index, deleteService, addRowFunc, emitEvent = true) {
    return new Promise((sub) => {
        const id = this.controls[index]?.value?.id;
        // debugger;
        if (id && deleteService) {
            const req = deleteService(id);
            let ps = null;
            if (req['toPromise']) {
                ps = req['toPromise']();
            }
            ps?.then((r) => {
                sub(this);
            });
        }
        if (this.controls.length == 1 && id) {
            this.removeAt(index, { emitEvent });
            if (addRowFunc)
                addRowFunc();
            else
                this.cAddItem();
        }
        else if (this.controls.length > 1)
            this.removeAt(index, { emitEvent });
        else if (this.controls.length == 1) {
            this.controls[0].reset();
        }
    });
};
//# sourceMappingURL=data:application/json;base64,