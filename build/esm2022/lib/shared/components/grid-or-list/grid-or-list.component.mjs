import { Component, EventEmitter, Input, Output } from '@angular/core';
import { RouterLink } from '@angular/router';
import { SelectionData } from '../../../shared/classes/selector.class';
import { cloneDeep } from 'lodash-es';
import { lastValueFrom } from 'rxjs';
import { FilterArrayByStringPipe, FunctionCaller1, ToAnyPipe } from '../../pipes/utility.pipe';
import { NoListComponent } from '../no-list/no-list.component';
import { TablePlainComponent } from '../table-plain/table-plain.component';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { TextComponent } from '../text/text.component';
import { LoaderComponent } from '../loader/loader.component';
import { BtnComponent } from '../btn/btn.component';
import { SearchBoxComponent } from '../search-box/search-box.component';
import { CountComponent } from '../count/count.component';
import { SvgIconComponent } from '../svg-icon/svg-icon.component';
import { NgFor, NgSwitch, NgSwitchCase, NgIf, NgSwitchDefault, NgClass, TitleCasePipe } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "../../../services/utility.service";
import * as i2 from "@angular/router";
import * as i3 from "@angular/material/checkbox";
export class GridOrListComponent {
    set _displayedColumns(value) {
        this.displayedColumns = value;
        this.displayedColumnsFields =
            value?.filter((x) => !x.hide)?.map((x) => x.f) || [];
        this.mainField = this.displayedColumns[0];
        this.subFields = this.displayedColumns?.filter((x) => !x.hide).slice(1);
    }
    set _data(v) {
        this.data = cloneDeep(v);
        this.selection = new SelectionData(this.data);
    }
    set _searchFunction(v$) {
        this.searchFunction = v$;
        this.fetchData(v$);
    }
    constructor(uS, route) {
        this.uS = uS;
        this.route = route;
        this.eViewType = EViewType;
        this.viewTypes = [
            { name: 'grid', value: EViewType.grid },
            { name: 'list', value: EViewType.list },
        ];
        this.viewType = this.viewTypes[0].value;
        this.breadcrumbs = [];
        this.onEdit = new EventEmitter();
        this.rowOptions = [{ t: 'Edit', action: (r) => this.onEdit.emit(r) }];
        this.formQueryParams = (row) => {
            return {
                [this.mID + 'ID']: row['id'],
                [this.mID + 'Name']: row['name'],
                [this.mID + 'Count']: this.data.length,
            };
        };
    }
    ngOnInit() {
        //Called after the constructor, initializing input properties, and the first call to ngOnChanges.
        //Add 'implements OnInit' to the class.
        this.pageName = this.route.snapshot.queryParamMap.get(this.parentID + 'Name');
        this.formBreadCrumbs();
    }
    fetchData(v$) {
        this.loading = true;
        v$(this.parentID
            ? this.route.snapshot.queryParamMap.get(this.parentID + 'ID')
            : undefined).subscribe({
            next: (r) => {
                // debugger;
                this.data = r;
                this.selection = new SelectionData(this.data);
                this.loading = false;
            },
            error: (error) => {
                this.uS.notify(error);
                console.error(error);
                this.loading = false;
            },
        });
    }
    switchView(vt) {
        this.viewType = vt.value;
        this.selection.reset();
    }
    tableSelection(r) {
        // debugger;
        r?.added?.forEach((x) => {
            this.selection.itemChanged(x['id'], { checked: true });
        });
        r?.removed?.forEach((x) => {
            this.selection.itemChanged(x['id'], { checked: false });
        });
    }
    async deleteItems(items) {
        if (this.deleteFunc)
            try {
                this.loading = true;
                await lastValueFrom(this.deleteFunc(items));
                this.refresh();
                this.loading = false;
            }
            catch (error) {
                console.error(error);
                this.uS.notify(error, 0);
                this.loading = false;
            }
    }
    refresh() {
        // debugger;
        this._searchFunction = this.searchFunction;
    }
    formBreadCrumbs() {
        const queries = this.route.snapshot.queryParams;
        const bc = [];
        const routes = location.pathname
            .split('/')
            .filter((x) => x?.includes('listing'))
            .map((x) => x.split('-')[0])
            .reverse();
        routes.splice(0, 1);
        this.idValues = {};
        for (let index = 0; index < routes.length; index++) {
            const id = routes[index];
            this.idValues[id] = queries[id + 'ID'];
            // debugger;
            bc.push({
                f: index == 0
                    ? undefined
                    : '../'.repeat(index + 1) + routes[index - 1] + '-listing',
                t: queries[id + 'Name'],
                value: index == 0 ? undefined : queries[routes[index - 1] + 'Count'],
            });
        }
        console.log(this.idValues);
        bc.reverse();
        this.breadcrumbs = [
            //#region
            {
                t: 'Zonal Offices',
                f: bc.length
                    ? '../'.repeat(bc.length + 1) + routes.lastItem() + '-listing'
                    : './',
                value: queries[routes[0] + 'Count'],
            },
            //#endregion
        ].concat(bc);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: GridOrListComponent, deps: [{ token: i1.UtilityService }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.0.2", type: GridOrListComponent, isStandalone: true, selector: "grid-or-list", inputs: { viewType: "viewType", loading: "loading", mID: "mID", parentID: "parentID", _displayedColumns: ["displayedColumns", "_displayedColumns"], _data: ["data", "_data"], deleteFunc: "deleteFunc", _searchFunction: ["searchFunction", "_searchFunction"] }, outputs: { onEdit: "onEdit" }, ngImport: i0, template: "<div class=\"row row-cols-auto form-grid justify-content-between mb-16\">\n    <div class=\"\">\n        <div class=\"row row-cols-auto g-8-2 align-items-center\">\n            <div>\n                <div class=\"row row-cols-auto g-8-2 align-items-center\">\n                    <ng-container *ngFor=\"let crumb of breadcrumbs;let isLast = last;let isFirst = first\">\n                        <span>\n                            <ng-container [ngSwitch]=\"true\">\n                                <ng-container *ngSwitchCase=\"isFirst\">\n                                    <span class=\"pe-lg-0 row row-cols-auto g-8-2 align-items-center\">\n                                        <svg-icon icon=\"home\" [routerLink]=\"[crumb.f]\" queryParamsHandling=\"merge\"\n                                            class=\"pointer\" />\n                                        <a [routerLink]=\"[crumb.f]\" queryParamsHandling=\"merge\" class=\" color-inherit \">\n                                            {{crumb.t|titlecase}}</a>\n                                        <ng-container *ngIf=\"!isLast\">\n                                            <count class=\" \" [count]=\"crumb?.value||0\">\n                                            </count><span class=\"text-primary\">/</span>\n                                        </ng-container>\n                                    </span>\n                                </ng-container>\n                                <ng-container *ngSwitchCase=\"isLast\">\n\n                                </ng-container>\n                                <ng-container *ngSwitchDefault>\n                                    <span class=\"pe-lg-0 row row-cols-auto g-8-2 align-items-center\">\n                                        <a [routerLink]=\"[crumb.f]\" queryParamsHandling=\"merge\"\n                                            class=\"  color-inherit \">{{crumb.t|titlecase}}</a>\n                                        <count class=\" \" [count]=\"crumb?.value||0\">\n                                        </count>\n                                        <span class=\"text-primary\"> /</span>\n                                    </span>\n                                </ng-container>\n                            </ng-container>\n                        </span>\n                    </ng-container>\n                </div>\n            </div>\n            <div class=\"d-flex\">\n                <span>{{pageName|titlecase}}</span>\n            </div>\n            <div class=\"d-flex\">\n                <count class=\" \" [count]=\"data?.length||0\">\n                </count>\n            </div>\n            <div class=\"d-flex\">\n                <search-box label=\"Search\" #searchBox hideMobile />\n            </div>\n        </div>\n    </div>\n    <div class=\"\">\n        <div class=\"row row-cols-auto g-0\">\n            <div class=\"\" *ngFor=\"let vt of viewTypes\">\n                <app-btn (mclick)=\"switchView(vt)\" [help]=\"vt.value|titlecase\" [showHelpIcon]=\"false\" [icon]=\"vt.value\"\n                    [type]=\"vt.value==viewType?'clear-pm':'clear'\" />\n            </div>\n        </div>\n    </div>\n</div>\n<loader [loading]=\"loading\" [hasContent]=\"!!data?.length\">\n    <div content>\n        <div class=\"\">\n            <ng-container [ngSwitch]=\"viewType\">\n                <ng-container *ngSwitchCase=\"eViewType.grid\">\n                    <div class=\"row  m-grid form-grid\">\n                        <div class=\"col-lg-3 \"\n                            *ngFor=\"let item of data|filterArrayByString:searchBox?.query:displayedColumnsFields\">\n                            <div class=\"card px-24 py-16\">\n                                <div class=\"head d-flex pointer justify-content-between align-items-center mb-8\">\n                                    <a [routerLink]=\"[mainField?.routeFormatter|functionCaller1:item]\"\n                                        [queryParams]=\"formQueryParams|functionCaller1:item\"\n                                        class=\"color-inherit d-block w-100\" queryParamsHandling=\"merge\">\n                                        <app-text [text]=\"item[mainField.f]|toAny\"></app-text>\n                                    </a>\n                                    <div class=\"mrb\" [ngClass]=\"{visible:mrb.checked}\">\n                                        <mat-checkbox #mrb class=\"circle-checkbox\"\n                                            (change)=\"selection?.itemChanged(item['id'],$event)\">\n                                        </mat-checkbox>\n                                        <app-btn [mini]=\"true\" type=\"clear\" icon=\"edit\" (mclick)=\"onEdit.emit(item)\" />\n                                    </div>\n                                </div>\n                                <div class=\"misc mt-8\" *ngFor=\"let field of subFields\">\n                                    <div class=\"row row-cols-lg-auto form-grid justify-content-between\">\n                                        <div class=\"misc-title\">\n                                            {{field.t}}\n                                        </div>\n                                        <div class=\"misc-val\" [innerHTML]=\"field.formatter?(field.formatter|functionCaller1:item[field.f]):item[field.f]\">\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"eViewType.list\">\n                    <table-plain (selectionChanged)=\"tableSelection($event)\"\n                        [data]=\"data|filterArrayByString:searchBox?.query:displayedColumnsFields\" [rowOptions]=\"rowOptions\"\n                        [displayedColumns]=\"displayedColumns\" [useSelection]=\"true\" [showPager]=\"true\" />\n                </ng-container>\n            </ng-container>\n        </div>\n    </div>\n    <no-list header=\"No {{mID}} has been created\" [hideAddBtn]=\"true\" noContent />\n</loader>", styles: [".m-grid .head,.m-grid .head a{font-style:normal;font-weight:600;font-size:14px;line-height:18px;display:flex;align-items:center;color:#333}.m-grid .head:focus,.m-grid .head:hover,.m-grid .head a:focus,.m-grid .head a:hover{color:#266dd3}.m-grid .head:focus .mrb,.m-grid .head:hover .mrb,.m-grid .head a:focus .mrb,.m-grid .head a:hover .mrb{visibility:visible}.m-grid .mrb{visibility:hidden;position:absolute;right:16px;background-image:linear-gradient(271deg,white,rgba(255,255,255,.7294117647));border-radius:50%;display:flex}.m-grid .mrb.visible{visibility:visible}.m-grid .desc{font-style:normal;font-weight:400;font-size:12px;line-height:18px;height:36px;overflow:hidden;display:block;text-overflow:ellipsis;align-items:center;color:#828282}.m-grid .misc{font-weight:500;font-size:10px;color:#828282}.m-grid .misc .misc-item{margin-top:4px}.m-grid .misc .misc-title{font-style:normal;font-weight:400;font-size:12px;line-height:16px;color:#828282}.m-grid .misc .misc-val{font-style:normal;font-weight:500;font-size:12px;line-height:16px;color:#000}svg-icon{color:#bdbdbd}\n"], dependencies: [{ kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "component", type: SvgIconComponent, selector: "svg-icon", inputs: ["class", "icon"] }, { kind: "directive", type: RouterLink, selector: "[routerLink]", inputs: ["target", "queryParams", "fragment", "queryParamsHandling", "state", "relativeTo", "preserveFragment", "skipLocationChange", "replaceUrl", "routerLink"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: CountComponent, selector: "count", inputs: ["count", "class"] }, { kind: "directive", type: NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "component", type: SearchBoxComponent, selector: "search-box", inputs: ["label", "query"], outputs: ["queryChanged"] }, { kind: "component", type: BtnComponent, selector: "app-btn,btn", inputs: ["formSchema", "icon", "type", "group", "actionType", "animate", "badge", "class", "customIcon", "disabled", "form", "help", "iconBtn", "lite", "loading", "mclass", "showHelpIcon", "mini", "text", "valid", "subButtons", "onFormInvalid"], outputs: ["mclick"] }, { kind: "component", type: LoaderComponent, selector: "loader", inputs: ["class", "text", "hasContent", "loading", "height"] }, { kind: "component", type: TextComponent, selector: "app-text", inputs: ["text"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "ngmodule", type: MatCheckboxModule }, { kind: "component", type: i3.MatCheckbox, selector: "mat-checkbox", inputs: ["disableRipple", "color", "tabIndex"], exportAs: ["matCheckbox"] }, { kind: "component", type: TablePlainComponent, selector: "table-plain", inputs: ["label", "rowOptions", "rowOptionsMap", "centerCells", "curvy", "customSelectClass", "displayedColumns", "distinct", "formatColumnHeaders", "idField", "noItemTxt", "nowrap", "orderDirection", "orderField", "pageSize", "pageSizeOptions", "placeSelectionAtRight", "resultsLength", "showExport", "showFilter", "showPager", "showRowPointer", "smallerFonts", "isDisabledFunc", "useSelection", "data"], outputs: ["rowClick", "view", "listMutated", "selectionChanged", "emitCheckbox"] }, { kind: "component", type: NoListComponent, selector: "no-list", inputs: ["header", "subheader", "addBtnText", "hideAddBtn"], outputs: ["addButtonClicked"] }, { kind: "pipe", type: TitleCasePipe, name: "titlecase" }, { kind: "pipe", type: FilterArrayByStringPipe, name: "filterArrayByString" }, { kind: "pipe", type: FunctionCaller1, name: "functionCaller1" }, { kind: "pipe", type: ToAnyPipe, name: "toAny" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.2", ngImport: i0, type: GridOrListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'grid-or-list', standalone: true, imports: [
                        NgFor,
                        NgSwitch,
                        NgSwitchCase,
                        SvgIconComponent,
                        RouterLink,
                        NgIf,
                        CountComponent,
                        NgSwitchDefault,
                        SearchBoxComponent,
                        BtnComponent,
                        LoaderComponent,
                        TextComponent,
                        NgClass,
                        MatCheckboxModule,
                        TablePlainComponent,
                        NoListComponent,
                        TitleCasePipe,
                        FilterArrayByStringPipe,
                        FunctionCaller1,
                        ToAnyPipe,
                    ], template: "<div class=\"row row-cols-auto form-grid justify-content-between mb-16\">\n    <div class=\"\">\n        <div class=\"row row-cols-auto g-8-2 align-items-center\">\n            <div>\n                <div class=\"row row-cols-auto g-8-2 align-items-center\">\n                    <ng-container *ngFor=\"let crumb of breadcrumbs;let isLast = last;let isFirst = first\">\n                        <span>\n                            <ng-container [ngSwitch]=\"true\">\n                                <ng-container *ngSwitchCase=\"isFirst\">\n                                    <span class=\"pe-lg-0 row row-cols-auto g-8-2 align-items-center\">\n                                        <svg-icon icon=\"home\" [routerLink]=\"[crumb.f]\" queryParamsHandling=\"merge\"\n                                            class=\"pointer\" />\n                                        <a [routerLink]=\"[crumb.f]\" queryParamsHandling=\"merge\" class=\" color-inherit \">\n                                            {{crumb.t|titlecase}}</a>\n                                        <ng-container *ngIf=\"!isLast\">\n                                            <count class=\" \" [count]=\"crumb?.value||0\">\n                                            </count><span class=\"text-primary\">/</span>\n                                        </ng-container>\n                                    </span>\n                                </ng-container>\n                                <ng-container *ngSwitchCase=\"isLast\">\n\n                                </ng-container>\n                                <ng-container *ngSwitchDefault>\n                                    <span class=\"pe-lg-0 row row-cols-auto g-8-2 align-items-center\">\n                                        <a [routerLink]=\"[crumb.f]\" queryParamsHandling=\"merge\"\n                                            class=\"  color-inherit \">{{crumb.t|titlecase}}</a>\n                                        <count class=\" \" [count]=\"crumb?.value||0\">\n                                        </count>\n                                        <span class=\"text-primary\"> /</span>\n                                    </span>\n                                </ng-container>\n                            </ng-container>\n                        </span>\n                    </ng-container>\n                </div>\n            </div>\n            <div class=\"d-flex\">\n                <span>{{pageName|titlecase}}</span>\n            </div>\n            <div class=\"d-flex\">\n                <count class=\" \" [count]=\"data?.length||0\">\n                </count>\n            </div>\n            <div class=\"d-flex\">\n                <search-box label=\"Search\" #searchBox hideMobile />\n            </div>\n        </div>\n    </div>\n    <div class=\"\">\n        <div class=\"row row-cols-auto g-0\">\n            <div class=\"\" *ngFor=\"let vt of viewTypes\">\n                <app-btn (mclick)=\"switchView(vt)\" [help]=\"vt.value|titlecase\" [showHelpIcon]=\"false\" [icon]=\"vt.value\"\n                    [type]=\"vt.value==viewType?'clear-pm':'clear'\" />\n            </div>\n        </div>\n    </div>\n</div>\n<loader [loading]=\"loading\" [hasContent]=\"!!data?.length\">\n    <div content>\n        <div class=\"\">\n            <ng-container [ngSwitch]=\"viewType\">\n                <ng-container *ngSwitchCase=\"eViewType.grid\">\n                    <div class=\"row  m-grid form-grid\">\n                        <div class=\"col-lg-3 \"\n                            *ngFor=\"let item of data|filterArrayByString:searchBox?.query:displayedColumnsFields\">\n                            <div class=\"card px-24 py-16\">\n                                <div class=\"head d-flex pointer justify-content-between align-items-center mb-8\">\n                                    <a [routerLink]=\"[mainField?.routeFormatter|functionCaller1:item]\"\n                                        [queryParams]=\"formQueryParams|functionCaller1:item\"\n                                        class=\"color-inherit d-block w-100\" queryParamsHandling=\"merge\">\n                                        <app-text [text]=\"item[mainField.f]|toAny\"></app-text>\n                                    </a>\n                                    <div class=\"mrb\" [ngClass]=\"{visible:mrb.checked}\">\n                                        <mat-checkbox #mrb class=\"circle-checkbox\"\n                                            (change)=\"selection?.itemChanged(item['id'],$event)\">\n                                        </mat-checkbox>\n                                        <app-btn [mini]=\"true\" type=\"clear\" icon=\"edit\" (mclick)=\"onEdit.emit(item)\" />\n                                    </div>\n                                </div>\n                                <div class=\"misc mt-8\" *ngFor=\"let field of subFields\">\n                                    <div class=\"row row-cols-lg-auto form-grid justify-content-between\">\n                                        <div class=\"misc-title\">\n                                            {{field.t}}\n                                        </div>\n                                        <div class=\"misc-val\" [innerHTML]=\"field.formatter?(field.formatter|functionCaller1:item[field.f]):item[field.f]\">\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </ng-container>\n                <ng-container *ngSwitchCase=\"eViewType.list\">\n                    <table-plain (selectionChanged)=\"tableSelection($event)\"\n                        [data]=\"data|filterArrayByString:searchBox?.query:displayedColumnsFields\" [rowOptions]=\"rowOptions\"\n                        [displayedColumns]=\"displayedColumns\" [useSelection]=\"true\" [showPager]=\"true\" />\n                </ng-container>\n            </ng-container>\n        </div>\n    </div>\n    <no-list header=\"No {{mID}} has been created\" [hideAddBtn]=\"true\" noContent />\n</loader>", styles: [".m-grid .head,.m-grid .head a{font-style:normal;font-weight:600;font-size:14px;line-height:18px;display:flex;align-items:center;color:#333}.m-grid .head:focus,.m-grid .head:hover,.m-grid .head a:focus,.m-grid .head a:hover{color:#266dd3}.m-grid .head:focus .mrb,.m-grid .head:hover .mrb,.m-grid .head a:focus .mrb,.m-grid .head a:hover .mrb{visibility:visible}.m-grid .mrb{visibility:hidden;position:absolute;right:16px;background-image:linear-gradient(271deg,white,rgba(255,255,255,.7294117647));border-radius:50%;display:flex}.m-grid .mrb.visible{visibility:visible}.m-grid .desc{font-style:normal;font-weight:400;font-size:12px;line-height:18px;height:36px;overflow:hidden;display:block;text-overflow:ellipsis;align-items:center;color:#828282}.m-grid .misc{font-weight:500;font-size:10px;color:#828282}.m-grid .misc .misc-item{margin-top:4px}.m-grid .misc .misc-title{font-style:normal;font-weight:400;font-size:12px;line-height:16px;color:#828282}.m-grid .misc .misc-val{font-style:normal;font-weight:500;font-size:12px;line-height:16px;color:#000}svg-icon{color:#bdbdbd}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.UtilityService }, { type: i2.ActivatedRoute }]; }, propDecorators: { viewType: [{
                type: Input
            }], loading: [{
                type: Input
            }], mID: [{
                type: Input
            }], parentID: [{
                type: Input
            }], onEdit: [{
                type: Output
            }], _displayedColumns: [{
                type: Input,
                args: ['displayedColumns']
            }], _data: [{
                type: Input,
                args: ['data']
            }], deleteFunc: [{
                type: Input
            }], _searchFunction: [{
                type: Input,
                args: ['searchFunction']
            }] } });
var EViewType;
(function (EViewType) {
    EViewType["list"] = "list";
    EViewType["grid"] = "grid";
})(EViewType || (EViewType = {}));
//# sourceMappingURL=data:application/json;base64,