import { FormControl, Validators, } from '@angular/forms';
export var Forms;
(function (Forms) {
    class ConfigForms {
        matches(formGroup, field1 = 'password', field2 = 'rpassword') {
            if (formGroup.get(field1).value !== formGroup.get(field2).value) {
                formGroup.get(field1).setErrors({ noMatch: true }, { emitEvent: true });
                formGroup.get(field2).setErrors({ noMatch: true }, { emitEvent: true });
            }
            else {
                formGroup.get(field1).setErrors(null, { emitEvent: true });
                formGroup.get(field2).setErrors(null, { emitEvent: true });
            }
            console.log(formGroup);
        }
        matches2(formGroup, field1, field2) {
            return formGroup.get(field1).value === formGroup.get(field2).value
                ? null
                : { noMatch: true };
        }
        email(required = true, value = '') {
            return new FormControl(value, Validators.compose([
                ...(required ? [Validators.required] : []),
                Validators.pattern(configPatterns.email),
            ]));
        }
        name(required = true, minLength = 2, value = '') {
            return new FormControl(value, Validators.compose([
                ...(required ? [Validators.required] : []),
                Validators.minLength(minLength),
                Validators.pattern(configPatterns.name),
            ]));
        }
        array(required = false, value = []) {
            return new FormControl(value, required ? [Validators.required] : []);
        }
        boolean(required = false, value = false) {
            return new FormControl(value, required ? [Validators.required] : []);
        }
        username(required = true, minLength = 3, maxLength = 10, value = '') {
            return new FormControl(value, [
                ...(required ? [Validators.required] : []),
                Validators.minLength(minLength),
                Validators.maxLength(maxLength),
                Validators.pattern(configPatterns.username),
            ]);
        }
        default(value, validatorOrOpts, asyncValidator) {
            return new FormControl(value, validatorOrOpts, asyncValidator);
        }
        number(required = false, value = null, maxLength = 100000) {
            return new FormControl(value, [
                ...(required ? [Validators.required] : []),
                Validators.pattern(configPatterns.number),
                Validators.maxLength(maxLength),
            ]);
        }
        integer(required = true, value = null, maxLength = 100000) {
            return new FormControl(value, [
                ...(required ? [Validators.required] : []),
                Validators.pattern(configPatterns.integer),
                Validators.maxLength(maxLength),
            ]);
        }
        postalCode(required = true, value = null) {
            return new FormControl(value, [
                Validators.pattern(configPatterns.postal),
                ...(required ? [Validators.required] : []),
            ]);
        }
        phone(required = true, value = '') {
            return new FormControl(value, [
                ...(required ? [Validators.required] : []),
                Validators.minLength(11),
                Validators.pattern(configPatterns.phone),
            ]);
        }
        requiredMinLength(length, value = '') {
            return new FormControl(value, [
                Validators.required,
                Validators.minLength(length),
            ]);
        }
        requiredMinMaxLength(min, max) {
            return new FormControl('', [
                Validators.required,
                Validators.minLength(min),
                Validators.maxLength(max),
            ]);
        }
        required(value = null) {
            return new FormControl(value, Validators.required);
        }
        minLength(length = 3, value = '') {
            return new FormControl(value, [
                Validators.minLength(length),
                Validators.required,
            ]);
        }
        url(value = '', required = true) {
            return new FormControl(value, Validators.compose([
                ...(required ? [Validators.required] : []),
                Validators.pattern(configPatterns.url),
            ]));
        }
        pattern(pattern, required = false, value) {
            return new FormControl(value, Validators.compose([
                ...(required ? [Validators.required] : []),
                Validators.pattern(pattern),
            ]));
        }
    }
    Forms.ConfigForms = ConfigForms;
})(Forms || (Forms = {}));
export const configForms = new Forms.ConfigForms();
export const configPatterns = {
    date: /^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[13-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/,
    email: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$/,
    integer: /^[0-9]+$/,
    name: /^[a-zA-Z0-9- ]+$/,
    number: /^-?[0-9,\.]+$/,
    phone: /^[+]*[0-9]+$/,
    postal: /^([0-9]{5})([\-]{1}[0-9]{4})?$|^([0-9]{6})?$/,
    url: /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)/,
    username: /^[a-zA-Z0-9-]+$/,
    website: /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)/,
};
//# sourceMappingURL=data:application/json;base64,