import { ValidatorFn, AsyncValidatorFn, FormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { InputBasicComponent, OptionLabelType } from '../components/input/input.component';
import { SVGIconType } from '../components/svg-icon/svg-icon.model';
import { InputType } from './index.model';
export interface IFormSchema<TFormGroup = any, TOption = any, TValue = any> {
    errorMessage?: string;
    initData?: any;
    asyncValidators?: AsyncValidatorFn[];
    autoPickValueField?: boolean;
    checked?: boolean;
    clearOnDisable?: boolean;
    cls?: string;
    countryCode3?: string;
    decimalPoints?: number;
    disabled?: boolean;
    showEmptyOption?: boolean;
    disabledIf?: (row: any, cellField?: string) => boolean;
    hideIfFunc?: (row: any) => boolean;
    field: keyof TFormGroup;
    form?: FormGroup<any>;
    getCountryCode3Key?: string;
    hidden?: boolean;
    noPaste?: boolean;
    hint?: string;
    startField?: string;
    endField?: string;
    icon?: SVGIconType;
    id?: string;
    isSearchField?: boolean;
    label?: string;
    prefix?: string;
    labelField?: keyof TOption;
    labelType?: OptionLabelType;
    max?: number;
    min?: number;
    multiple?: boolean;
    order?: string;
    nextField?: keyof TFormGroup;
    sub?: IFormSchema[];
    noFormat?: boolean;
    onChangeFunc?: (row: TValue, cellField?: any, _this?: any, inp?: InputBasicComponent) => any;
    optionFormatter?: (item: any) => string;
    options?: TOption[];
    optionsAsync?: Observable<TOption[]> | Promise<TOption[]>;
    optionsInitFunc?: () => Observable<TOption[]>;
    optionsKey?: string;
    placeholder?: string;
    searchFunc?: (...args: any[]) => any;
    required?: boolean;
    setAsCountryCode3?: boolean;
    showValidation?: boolean;
    showValidationIcon?: boolean;
    showSeperateLabel?: boolean;
    templateValue?: any;
    type?: InputType;
    validators?: ValidatorFn[];
    value?: any;
    valueField?: keyof TOption;
    optionsFunc?: (row: any, cellField?: string) => Promise<any[]> | Observable<any[]>;
}
export interface IFormOptions {
    [field: string]: any;
}
